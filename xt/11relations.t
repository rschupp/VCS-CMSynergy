#!/usr/bin/perl -w

use Test::More;
use xt::util;
use strict;

my %from_exp = 
(
    baseline_project => 
    [
        {
            to => {
                objectname => 'calculator:1.0:project:1',
                status_log => "Wed Aug 13 15:26:09 1997: Status set to 'working' by ccm_root in role ccm_admin\nWed Aug 13 16:29:00 1997: Status set to 'released' by ccm_root in role ccm_admin",
                task_number => undef
            },
            from => 'calculator:int:project:1',
            name => 'baseline_project',
            create_time => ignore(),
        },
    ],
    folder_in_rp =>
    [
        {
            to => {
                objectname => '4:1:folder:probtrac',
                status_log => "Mon Nov 25 17:56:37 2002: Status set to 'working_folder' by ccm_root in role ccm_admin\nMon Nov 25 17:56:38 2002: Status set to 'prep_folder' by ccm_root in role ccm_admin",
                task_number => undef
            },
            from => 'calculator:int:project:1',
            name => 'folder_in_rp',
            create_time => ignore(),
        },
    ],
    task_in_rp =>
    [
        {
            to => {
                objectname => 'task37:1:task:probtrac',
                status_log => "Mon Jun 16 14:13:46 2003: Status set to 'registered' by ccm_root in role ccm_admin\nMon Jun 16 14:13:46 2003: Status set to 'task_automatic' by ccm_root in role ccm_admin",
                task_number => '37'
            },
            from => 'calculator:int:project:1',
            name => 'task_in_rp',
            create_time => ignore(),
        },
        {
            to => {
                objectname => 'task38:1:task:probtrac',
                status_log => "Mon Jun 16 14:13:46 2003: Status set to 'registered' by ccm_root in role ccm_admin\nMon Jun 16 14:13:46 2003: Status set to 'task_automatic' by ccm_root in role ccm_admin",
                task_number => '38'
            },
            from => 'calculator:int:project:1',
            name => 'task_in_rp',
            create_time => ignore(),
        },
    ],
    project_grouping =>
    [
        {
            to => {
                  objectname => 'Toolkit%002f2.0%003aintegrate:1:project_grouping:1',
                  status_log =>  ignore(),	# this object was generated by upgrade	
                  task_number => undef
            },
            from => 'calculator:int:project:1',
            name => 'project_grouping',
            create_time => ignore(),
        },
    ],
    reconfigure_template =>
    [
        {
            to => {
                  objectname => 'Toolkit%003aIntegration Testing:2.0:process_rule:1',
                  status_log => ignore(),	# this object was generated by upgrade
                  task_number => undef
            },
            from => 'calculator:int:project:1',
            name => 'reconfigure_template',
            create_time => ignore(),
        },
    ],
);


my %to_exp = 
(
    associated_cv =>
    [
        {
            to => { objectname => 'calculator:int:project:1' },
            from => {
                objectname => 'task37:1:task:probtrac',
                status_log => "Mon Jun 16 14:13:46 2003: Status set to 'registered' by ccm_root in role ccm_admin\nMon Jun 16 14:13:46 2003: Status set to 'task_automatic' by ccm_root in role ccm_admin",
                task_number => '37'
            },
            name => 'associated_cv',
            create_time => ignore(),
        },
    ],
    successor =>
    [
        {
            to => { objectname => 'calculator:int:project:1' },
            from => {
                objectname => 'calculator:int_20021125:project:1',
                status_log => "Mon Nov 25 18:36:31 2002: Status set to 'working' by ccm_root in role build_mgr\nMon Nov 25 18:36:32 2002: Status set to 'prep' by ccm_root in role build_mgr\nMon Nov 25 18:36:39 2002: Status set to 'integrate' by ccm_root in role build_mgr",
                task_number => undef
            },
            name => 'successor',
            create_time => ignore(),
        },
    ],
);


plan tests => 5 + 2 * (keys %from_exp) + 2 * (keys %to_exp);

my @use = ();
push @use, ':cached_attributes' if $ENV{CCM_USE_CACHED_ATTRIBUTES};
use_ok('VCS::CMSynergy', @use); 
SKIP:
{
    skip "not using :cached_attributes", 1 
        unless $ENV{CCM_USE_CACHED_ATTRIBUTES};
    ok(VCS::CMSynergy::use_cached_attributes(), q[using :cached_attributes]);
}


my $ccm = VCS::CMSynergy->new(%::test_session);
isa_ok($ccm, "VCS::CMSynergy");
diag("using coprocess") if defined $ccm->{coprocess};
diag("using :cached_attributes") if VCS::CMSynergy::use_cached_attributes();


while (my ($name, $exp) = each %from_exp)
{
    my @rel_exp =
        map { [ vco($_->{from}),
                $name, 
                vco($_->{to}{objectname}), 
                ignore() ] } @$exp;
    my $from_rel_got = $ccm->relations_arrayref(
        name            => $name,
        from            => "calculator-int:project:1");
    verbose('from_rel_got', $from_rel_got);
    cmp_bag($from_rel_got, \@rel_exp, "relation $name FROM project");

    my $from_got = $ccm->relations_hashref(
        name            => $name,
        from		=> "calculator-int:project:1",
        to_attributes	=> [ qw/ objectname status_log task_number / ]);
    verbose('from_got', $from_got);
    cmp_bag($from_got, $exp, "relations_hashref $name FROM project");
}



while (my ($name, $exp) = each %to_exp)
{
    my @rel_exp =
        map { [ vco($_->{from}{objectname}), 
                $name, 
                vco($_->{to}{objectname}), 
                ignore() ] } @$exp;

    my $to_rel_got = $ccm->relations_arrayref(
        name            => $name,
        to              => "calculator-int:project:1");
    verbose('to_rel_got', $to_rel_got);
    cmp_bag($to_rel_got, \@rel_exp, "relation $name TO project");

    my $to_got = $ccm->relations_hashref(
        name            => $name,
        to		=> "calculator-int:project:1",
        to_attributes	=> [ qw/ objectname / ],
        from_attributes	=> [ qw/ objectname status_log task_number / ]);
    verbose('to_got', $to_got);
    cmp_bag($to_got, $exp, "relations_hashref $name TO project");
}

my $frobozz = eval 
{ 
    $ccm->relations_arrayref(name => "wtf", to => "frobozz-42:csrc:1"); 
};
ok($@, "non-existing TO object throws exception");

my $empty_got = $ccm->relations_arrayref(name => "wtf", to => "bufcolor.c-1:csrc:1");
verbose('empty_got', $empty_got);
cmp_bag($empty_got, [], "empty set of TO relations");

exit 0;
